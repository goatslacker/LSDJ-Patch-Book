<?php
// auto-generated by sfPropelCrud
// date: 2009/01/25 05:42:40
?>
<?php

/**
 * instrument actions.
 *
 * @package    lsdjie
 * @subpackage instrument
 * @author     Josue Perez
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class instrumentActions extends sfActions
{

public function executeSearch ()
{
  if ($this->getRequestParameter('search'))
  {
    $this->instruments = InstrumentPeer::search($this->getRequestParameter('search'), $this->getRequestParameter('search_all', false), ($this->getRequestParameter('page', 1) - 1) * sfConfig::get('app_search_results_max'), sfConfig::get('app_search_results_max'));
  }
  else
  {
    $this->redirect('@homepage');
  }
}
  public function executeIndex()
  {
    return $this->forward('instrument', 'list');
  }
public function executeList ()
{
  $this->getResponse()->setTitle(sfConfig::get('app_tag') . " Patch Book");
  $this->instrument_pager = InstrumentPeer::getHomepagePager($this->getRequestParameter('page', 1)); 
}
  public function executeShow()
  {
	$this->instrument = InstrumentPeer::retrieveByName($this->getRequestParameter('name'),$this->getRequestParameter('author'));
    if ($this->instrument->getSoftware() != sfConfig::get('app_tag')) $this->forward404();
    $this->forward404Unless($this->instrument);
	$this->getResponse()->setTitle("Patch Book - ". $this->instrument->getAuthor() . " - " . $this->instrument->getName());
  }

  public function executeCreate()
  {
    $this->instrument = new Instrument();
    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->instrument = InstrumentPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->instrument);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $instrument = new Instrument();
    }
    else
    {
      $instrument = InstrumentPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($instrument);
    }
  
    if ($instrument->getAuthor() == '') {
	  $_editing = false;
	} else {
	  $_editing = true;
	  $_validUser = ($this->getUser()->getSubscriberId() == $instrument->getOwner() || $this->getUser()->getSubscriberId() == $instrument->getAuthor())? true:false;
	}

	if ($_editing == false || ($_editing == true && $_validUser == true)) {
      $instrument->setSoftware(sfConfig::get('app_tag'));
      $instrument->setId($this->getRequestParameter('id'));
      $instrument->setName($this->getRequestParameter('name'));
      $instrument->setType($this->getRequestParameter('type'));
      $instrument->setAuthor($this->getRequestParameter('author'));
      $instrument->setDescription($this->getRequestParameter('description'));

	  switch (sfConfig::get('app_tag')) {
		case "FamiTracker":
		  $OB = editInstrument::FamiTracker($this);
		  break;
		default: 
		  $OB = editInstrument::LSDJ($this);
	  }

      $instrument->setObject(serialize($OB));
      $instrument->setOwner($this->getUser()->getSubscriber());
      if ($instrument->getAuthor() == $instrument->getUser()) $instrument->setShare($this->getRequestParameter('share'));
      $instrument->save();
	}

    return $this->redirect("@instrument?author=".$instrument->getAuthorStrip()."&name=".$instrument->getStripped());
  }

  public function executeDelete()
  {
    $instrument = InstrumentPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($instrument);

    $instrument->delete();

    return $this->redirect('instrument/list');
  }

  public function executeType() {
	$this->instrument_pager = InstrumentPeer::getByType($this->getRequestParameter('type'),$this->getRequestParameter('page'));
	$this->forward404Unless($this->instrument_pager);

    $this->setTemplate('list');
  }

public function executePostComment() {
	  $this->instrument = InstrumentPeer::retrieveByPk($this->getRequestParameter('instrument_id'));
	  $this->forward404Unless($this->instrument);

      $comment = new Comment();
	  $comment->setInstrumentId($this->getRequestParameter('instrument_id'));
	  $comment->setAuthor($this->getUser()->getSubscriber());
	  $comment->setComment($this->getRequestParameter('comment'));
	  $comment->save();
	
	  return $this->redirect($this->getRequestParameter('referer'));
}

public function executePopular()
{
  $this->instrument_pager = InstrumentPeer::getPopularPager($this->getRequestParameter('page', 1));
}

public function handleErrorUpdate()
{
  $this->forward('instrument','create');
  return sfView::SUCCESS;
}

public function handleErrorUpload()
{
  $this->forward('instrument','show');
  return sfView::SUCCESS;
}

public function executeUpload() {
  $this->instrument = InstrumentPeer::retrieveByPk($this->getRequestParameter('instrument_id'));
  $this->forward404Unless($this->instrument);
  $fileName = md5($this->getRequest()->getFileName('file').time()).".mp3";

  $this->instrument->setSample($fileName);
 
  $this->getRequest()->moveFile('file', sfConfig::get('sf_upload_dir').'/'.$fileName);
  $this->instrument->save();
 
  $this->setTemplate('show');
  return $this->redirect($_SERVER['HTTP_REFERER']);
}

public function executeILike() {
  $this->instrument = InstrumentPeer::retrieveByPk($this->getRequestParameter('instrument_id'));
  $this->forward404Unless($this->instrument);

  InstrumentPeer::addLike($this->instrument);

  return $this->redirect($_SERVER['HTTP_REFERER']);
}

public function executeImport() {
  if ($this->getRequest()->getMethod() != sfRequest::POST) {
    // display the form
    return sfView::SUCCESS;
  } else {
  	exec("/var/www/lsdj-patches/web/bin/lsdj2xml {$_FILES['file']['tmp_name']}", $lsdj2xml);
  	$xml = implode($lsdj2xml);
  	$this->xml = myTools::Xml2Array($xml);
  }
}

public function executeExport() {
/*  LSDJ SAV Binary Data

    type envelope synth/pu2_tune length shape/sweep vib_type/automate table output/duty_cycle/pu_fine
    Pulse/Noise:
    0 ffffffa8 0 0 ffffffff 0 0 3 0 0 ffffffd0 0 0 0 fffffff3 0

    type volume synth/repeat x x vib_type/automate table output x play x x x x length/speed
    Wave:
    1 a8 07 0 ffffffff 0 0 3 0 0 ffffffd0 0 0 0 ffffff80 0 

    wave filter q dist phase start_vol cutoff phase vshift end_vol cutoff phase vshift
    Synth:
    0 1 5 0 0 10 ffffffff 0 0 10 ffffffff 0 0 0 0 0 
*/

  $this->bank = BankPeer::retrieveByPk($this->getRequestParameter('bank'));

  $this->forward404Unless($this->bank);

  $aType = array("PULSE","WAVE","KIT","NOISE");
  $aVib_type = array("HF","","SAW","","TRI","","SQR");
  $aOutput = array("--","L-","-R","LR");
  $aWave = array(0 => "12.5", 4 => "25", 8 => "50", "C" => "75");
  $aVol = array("00", "20", "40", "A8");
  $aPlay = array("ONCE","LOOP","PINGPONG","MANUAL");
  $aWAV = array("SAW","SQR","TRI");
  $aFilter = array("LOWP","HIGHP","BANDP","ALLP");
  $aDist = array("CLIP","WRAP");
  $aPhase = array("NORMAL","RESYNC","RESYN2");
  $aFX = array(1=>"A",2=>"C",4=>"E",5=>"F",6=>"G",7=>"H",8=>"K",'a'=>"L",'b'=>"M",'c'=>"P",'d'=>"R",'e'=>"S",'f'=>"T",10=>"V",11=>"W");

  $this->data = '';   // instrument data output
  $this->softsynth = array();  // synth data ouput
  $this->tables = array();

  $this->instruments = $this->bank->getInstruments();

  foreach ($this->instruments as $ins) {
    $instrument = unserialize($ins->getObject());
    $type = array_keys($aType, $ins->getType());
    $pos = array();

    $vib_type = ($ins->getType() == "PULSE") ? array_keys($aVib_type, $instrument->vib_type) : array(0); // bug with Noise's automate?
    $vib_type_automate = ($instrument->automate == "ON")? $vib_type[0] * 2 : $vib_type[0];
    $table = ($instrument->table == "ON") ? dechex(count($this->tables)+0x20) : '00';
    $output = array_keys($aOutput, $instrument->output);

    if ($ins->getType() == "PULSE") {
      $pos[] = "0".$type[0];
      $pos[] = $instrument->envelope;
      $pos[] = $instrument->pu2_tune;
      $pos[] = XML2LSDJ::length($instrument->length);
      $pos[] = $instrument->sweep;
      $pos[] = "0".$vib_type_automate;
      $pos[] = $table;

      $wave1 = '';
      $wave = array_keys($aWave, $instrument->wave);
      $wave1 = ($wave[0] != "0")? $wave[0] : '';
      $output_wave = $wave1 . $output[0];
      $pu_fine = (hexdec($instrument->pu_fine) * 4);

      $pos[] = str_pad(dechex((hexdec($output_wave) + $pu_fine)), 2, "0", STR_PAD_LEFT);
      $pos[] = "00 00 d0 00 00 00 f3 00 ";

    } elseif ($ins->getType() == "NOISE") {
      $pos[] = "0".$type[0];
      $pos[] = $instrument->envelope;
      $pos[] = "00";
      $pos[] = XML2LSDJ::length($instrument->length);
      $pos[] = $instrument->shape;
      $pos[] = "0".$vib_type_automate;
      $pos[] = $table;
      $pos[] = "0".$output[0];
      $pos[] = "00 00 d0 00 00 00 f3 00 ";

    } elseif ($ins->getType() == "WAVE" && (count($this->softsynth) < 17)) {
      $pos[] = "0".$type[0];
      $pos[] = $aVol[$instrument->volume];

      $synth = str_pad(dechex(count($this->softsynth)), 2, "0", STR_PAD_LEFT);

      $pos[] = $synth . $instrument->repeat;
      $pos[] = "00";
      $pos[] = "FF";
      $pos[] = "0".$vib_type_automate;
      $pos[] = $table;
      $pos[] = "0".$output[0];
      $pos[] = "00";
      $play = array_keys($aPlay, $instrument->play);
      $pos[] = "0".$play[0];
      $pos[] = "d0 00 00 00";
      $length = $instrument->length;
      $speed = ($instrument->speed > 0) ? ($instrument->speed - 1) : 0;
      $pos[] = $length . $speed;
      $pos[] = "00";

      //  soft synth params.
      $this->softsynth[$synth] = '';

      $wav = array_keys($aWAV, $instrument->s_wave);
      $filter = array_keys($aFilter, $instrument->s_filter);
      $dist = array_keys($aDist, $instrument->s_dist);
      $phase = array_keys($aPhase, $instrument->s_phase);

      $this->softsynth[$synth] .= '0'.$wav[0] .' '
        . '0'.$filter[0] .' '
        . '0'.$instrument->s_q .' '
        . '0'.$dist[0] .' '
        . '0'.$phase[0] .' '
        . $instrument->s_start_volume .' '
        . $instrument->s_start_cutoff .' '
        . $instrument->s_start_phase .' '
        . $instrument->s_start_vshift .' '
        . $instrument->s_end_volume .' '
        . $instrument->s_end_cutoff .' '
        . $instrument->s_end_phase .' '
        . $instrument->s_end_vshift .' 00 00 00';
    }

    if ($instrument->table == "ON") { // tables here.
      foreach ($instrument->_table as $_table) { // loop through all rows
        @$this->tables['vol'][$table] .= $_table[0] .' ';
        @$this->tables['tsp'][$table] .= $_table[1] .' ';

        $fx = array_keys($aFX, substr($_table[2], 0, 1));
        $fx2 = array_keys($aFX, substr($_table[3], 0, 1));

        @$this->tables['fx'][$table] .= str_pad($fx[0], 2, "0", STR_PAD_LEFT) .' ';
        @$this->tables['fxval'][$table] .= substr($_table[2], 1, 2) .' ';
        @$this->tables['fx2'][$table] .= str_pad($fx2[0], 2, "0", STR_PAD_LEFT) .' ';
        @$this->tables['fxval2'][$table] .= substr($_table[3], 1, 2) .' ';
      }
    }

    foreach ($pos as $item) {
      $this->data .= $item . " ";
    }
  }

  for ($i = count($this->instruments); $i < 64; $i++) { // default instrument filler data;
    $this->data .= "00 a8 00 00 ff 00 00 03 00 00 d0 00 00 00 f3 00 ";
  }

  for ($i = count($this->softsynth); $i < 16; $i++) { // default synth filler data;
    $this->softsynth[] = "00 00 00 00 00 10 FF 00 00 10 FF 00 00 00 00 00";
  }

  $this->data = strtolower($this->data); // lowercase everything, why? I have no clue...



  // encode to binary
  $this->data = XML2LSDJ::hex2bin($this->data);
  $this->softsynth = XML2LSDJ::hex2bin(implode($this->softsynth));
  $this->table_vol = XML2LSDJ::hex2bin(str_pad(implode($this->tables['vol']), 1536, "00 ", STR_PAD_RIGHT));
  $this->table_tsp = XML2LSDJ::hex2bin(str_pad(implode($this->tables['tsp']), 1536, "00 ", STR_PAD_RIGHT));
  $this->table_fx = XML2LSDJ::hex2bin(str_pad(implode($this->tables['fx']), 1536, "00 ", STR_PAD_RIGHT));
  $this->table_fxval = XML2LSDJ::hex2bin(str_pad(implode($this->tables['fxval']), 1536, "00 ", STR_PAD_RIGHT));
  $this->table_fx2 = XML2LSDJ::hex2bin(str_pad(implode($this->tables['fx2']), 1536, "00 ", STR_PAD_RIGHT));
  $this->table_fxval2 = XML2LSDJ::hex2bin(str_pad(implode($this->tables['fxval2']), 1536, "00 ", STR_PAD_RIGHT));


  // file read
  $this->filename = "/var/www/lsdj-patches/web/bin/blank.sav";
  $fh = fopen($this->filename, "rb");
  $whole = fread($fh, filesize($this->filename));
  fclose($fh);

  $fh = tmpfile();

  fseek($fh, 0x0000);
  fwrite($fh, $whole);

  fseek($fh, 0x3080);
  fwrite($fh, $this->data);

  fseek($fh, 0x3EB2);
  fwrite($fh, $this->softsynth);

  fseek($fh, 0x1690);
  fwrite($fh, $this->table_vol);

  fseek($fh, 0x3480);
  fwrite($fh, $this->table_tsp);

  fseek($fh, 0x3680);
  fwrite($fh, $this->table_fx);

  fseek($fh, 0x3880);
  fwrite($fh, $this->table_fxval);

  fseek($fh, 0x3A80);
  fwrite($fh, $this->table_fx2);

  fseek($fh, 0x3C80);
  fwrite($fh, $this->table_fxval2);

  $this->sav = fread($fh, 131072); // output

  fclose($fh);
    
  $this->setLayout(false);
  $this->getResponse()->setContentType('application/octet-stream');
  $this->getResponse()->addHttpMeta('Accept-Ranges: bytes');
  $this->getResponse()->addHttpMeta('Content-Transfer-Encoding: binary');
  $this->getResponse()->addHttpMeta('Content-Length: 131072');
}

}
